{"componentChunkName":"component---src-templates-devlog-js","path":"/devlog/essay/20210407","result":{"data":{"markdownRemark":{"html":"<p>Interview Preparaion Kit Stack and Queue 문제</p>\n<p><strong>난이도</strong> Medium</p>\n<h2>문제</h2>\n<p>주어진 배열의 숫자를 1개 부터 주어진 배열의 길이까지의 그룹으로 묶는다. 이 그룹에서 나오는 최솟값 중의 최댓값들을 구하여라.</p>\n<h2>예시</h2>\n<pre><code class=\"language-js\">arr = [2, 6, 1, 12]\n</code></pre>\n<ul>\n<li>길이가 1인 그룹 : <code>2</code>, <code>6</code>, <code>1</code>, <code>12</code></li>\n<li>길이가 2인 그룹 : <code>2, 6</code>, <code>6, 1</code>, <code>1, 12</code></li>\n<li>길이가 3인 그룹 : <code>2, 6, 1</code>, <code>6, 1, 12</code></li>\n<li>길이가 4인 그룹 : <code>2, 6, 1, 12</code></li>\n</ul>\n<p>각 그룹의 최솟값 중 최댓값을 배열로 나타내면 <code>[12, 2, 1, 1]</code>이 된다.</p>\n<h2>생각의 흐름</h2>\n<p>스택과 큐 문제라 스택과 큐를 어떻게 사용할 수 있을까 생각했지만, 역시 나오지 않았다. 그래서 그냥 생각나는 대로 코드를 짜봤다.</p>\n<p>사이즈에 따라 배열들을 자르고 그 배열에서 최솟값을 구해서 하는 방법으로 했다.</p>\n<p>반복문을 2번 돌려서 O(n^2)이 나왔다. 웬만해서는 O(n^2)으로 해도 괜찮지만, 배열의 길이가 10^6이라 안될 것 같았다. 그래도 어쩌겠나, 생각나는 방법이 이거 밖에 없었다.</p>\n<h3>1차 시기 코드</h3>\n<pre><code class=\"language-js\">function solve(arr) {\n    let answer = [];\n    \n    for (let size = 1; size &#x3C;= arr.length; size++) {\n        let max_size = 0;\n        \n        for (let i = 0; i &#x3C;= arr.length - size; i++) {\n            const a = arr.slice(i, i + size);\n            max_size = Math.max(Math.min(...a), max_size);\n        }\n        \n        answer.push(max_size);\n    }\n    \n    return answer;\n}\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113811844-ec04c400-97a7-11eb-8687-09d93fbda321.png\" alt=\"image\"></p>\n<p>결과 자체는 맞았지만 시간복잡도를 뚫지 못했다. Timeout이 나왔다. 다른 사람의 힌트를 봐도 아직 와닿지 않는다.</p>\n<p>나중에 좀 더 스택과 큐 문제를 풀어보고 나서 다시 한번 풀어보도록 해야겠다.</p>","frontmatter":{"path":"devlog/essay/20210407","category":"coding test","title":"[해커랭크] Min Max Riddle","summary":"오늘의 코딩테스트 21.4.7","date_created":"2021.4.7","date_updated":""}}},"pageContext":{}},"staticQueryHashes":[]}