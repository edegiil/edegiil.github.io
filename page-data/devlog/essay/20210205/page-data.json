{"componentChunkName":"component---src-templates-devlog-js","path":"/devlog/essay/20210205","result":{"data":{"markdownRemark":{"html":"<p>Interview Preperation Kit Arrays 문제\n난이도 Medium</p>\n<h2>문제</h2>\n<p>사람들이 롤러코스터 타러 갔다. 사람들이 줄을 서있는데, 앞 사람에게 돈을 주면 자리를 바꿔준다. 최대 2명까지 돈을 줄 수 있다. 주어진 대기열을 보고 몇번의 돈이 오고 갔는지 알아내라.</p>\n<h2>예시</h2>\n<pre><code class=\"language-js\">q = [1, 2, 3, 5, 4, 6, 7, 8]\n</code></pre>\n<p>4번과 5번의 위치가 바뀌었다. 5번이 바로 앞의 4번에게 돈을 쥐어줬으니 총 <code>1번</code>의 돈이 오고 갔다.</p>\n<h3>테스트 케이스</h3>\n<p>1 &#x3C;= n &#x3C;= 1000  60%\n1 &#x3C;= n &#x3C;= 100000  100%</p>\n<h2>생각의 흐름</h2>\n<p>처음부터 반복문 돌려서 현재 위치보다 값이 클 경우, 값 - 위치를 오고간 횟수에 모두 더한다.\n그렇지만 돈 받고 뒤로 밀려난 사람들 중에서도 또 돈을 준 사람이 있을 수 있으니까,\n앞에서부터 한명씩 비교하면서 원래 위치보다 뒤로 밀려난 사람이 있을경우에 그 사람을 <code>커서</code>로 잡고 그 커서보다 작은 값을 가진 사람이 있을 경우에는 오고간 횟수에 1씩 더해주면 되지 않을까 생각했다.</p>\n<h3>1차 시기 코드</h3>\n<pre><code class=\"language-js\">function minimumBribes(q) {\n    let is_chaotic = false;\n    let cursor = 0;\n    let count = 0;\n    \n    q.forEach((v, i) => {\n        const difference = v - i - 1;\n        if (difference > 2) {\n            is_chaotic = true;\n        } else if (difference > 0) {\n            count += difference;\n        } else {\n            if (cursor &#x3C; v) {\n                cursor = v;\n            } else if (cursor > v) {\n                count++;\n            }\n        }\n    });\n    \n    if (is_chaotic) {\n        console.log('Too chaotic');\n    } else {\n        console.log(count);\n    }\n}\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/106979018-c3108480-67a0-11eb-84a1-c8b8abc5862a.png\" alt=\"스크린샷 2021-02-05 오전 10 56 01\"></p>\n<p>대부분 실패했다. 숫자가 적은 건 다 통과했는데, n이 500을 넘어가는 건 실패했다. 문제가 뭔지 도저히 모르겠다. 2씩 차이가 나거나 3씩 차이가 났는데, 짧은 배열에 대해서 맞는 거 보면 뭔가 어디 코딩을 잘못한게 있는가 싶어서 찾아봤지만 도저히 보이지 않았다.</p>\n<p>그래서 새로운 방법을 생각해 봤다.</p>\n<p>사람들은 어차피 뒤에 있는 사람이 앞으로 옮겨가는 것이니까, 이번엔 뒤에서 부터 반복문을 돌리는 것이다.</p>\n<p>JS를 할 때 함수형 프로그래밍을 하려는 습관이 있어서 일반적인 for문은 쓰질 않고 <code>forEach</code>나 <code>map</code> 같은 메소드를 사용해왔는데, 알고리즘을 풀때는 break나 continue가 되는 일반적인 for문을 사용해야 할 것 같다.</p>\n<p>게다가 역순으로 돌리기도 쉬우니 (물론 배열을 <code>reverse</code>해서 <code>forEach</code> 돌려도 되지만..) for문을 사용해봤다.</p>\n<p>뒤에서 부터 앞으로 오면서는 기존과 같이 원래 위치와 현재 위치의 차이를 오고간 횟수에 더해준다.</p>\n<p>하지만 다음에 오는 생각을 조금 바꿔봤는데, 만약 원래 위치가 현재 위치보다 앞에 있을 경우에는, 뒤에 있는 수 중에 최솟값을 잡고, 최솟값보다 크다면 오고간 횟수에 1씩 더해주는 것이다. 그렇게 되면, 밀려난 친구들 중에서도 바뀐 걸 잡을 수 있게된다.</p>\n<pre><code class=\"language-js\">function minimumBribes(q) {\n    let is_chaotic = false;\n    let min_value = q.length;\n    let count = 0;\n    \n    for (let i = q.length; i > 0; i--) {\n        const v = q[i - 1];\n        const differnece = v - i;\n        if (differnece > 2) {\n            is_chaotic = true;\n            break;\n        }\n        if (v > i) {\n            count += differnece;\n        }  else {\n            if (min_value > v) {\n                min_value = v;\n            } else if (v > min_value) {\n                count++\n            }\n        }\n    }\n    \n    if (is_chaotic) {\n        console.log('Too chaotic');\n    } else {\n        console.log(count);\n    }\n}\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/106978958-a5dbb600-67a0-11eb-88f1-5406c554d206.png\" alt=\"스크린샷 2021-02-05 오전 10 55 13\"></p>\n<p>성공했다. 처음으로 이렇게 막힌 문제가 나왔다. 앞으로는 점점 더 어려워지겠지?</p>","frontmatter":{"path":"devlog/essay/20210205","category":"coding test","title":"[해커랭크] New Year Chaos","summary":"해커랭크 알고리즘 문제","date_created":"2021.2.5","date_updated":""}}},"pageContext":{}},"staticQueryHashes":[]}