{"componentChunkName":"component---src-templates-devlog-js","path":"/devlog/essay/20210406","result":{"data":{"markdownRemark":{"html":"<p>Interview Preparaion Kit Stack and Queue 문제</p>\n<p><strong>난이도</strong> Medium</p>\n<h2>문제</h2>\n<p>오래된 건물을 허물고 그 위치에 쇼핑몰을 지으려고 한다. 최대한 넓게 짓고 싶은데, 가능한 쇼핑몰의 최대 넓이를 구하라. 즉, 한줄로 서있는 건물들의 층고를 고려해서 최대한 넓은 직사각형을 구하라</p>\n<h2>예시</h2>\n<pre><code class=\"language-js\">h = [1, 2, 3, 4, 5]\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113711186-9be21f00-971f-11eb-97f2-d65554ce932d.png\" alt=\"image\"></p>\n<p>가장 넓은 직사각형은 3번째, 4번째, 5번째 건물을 걸치는 3층짜리 쇼핑몰이다. 3(건물 3개) X 3(층고) = <code>9</code></p>\n<h2>생각의 흐름</h2>\n<p>간단해 보이는 문제였지만, 어려웠다. 어떤 방법으로 해야할까 생각하다가 머릿속에 그려지는 방법대로 해보기로 했다.</p>\n<p>커서를 하나 돌린다.</p>\n<p>커서는 최대 넓이가 나오는 건물로 옮겨가며, 최대넓이는 현재 건물부터 커서가 있는 건물까지, 커서가 있는 건물의 높이로 결과가 나오는 넓이가 된다.</p>\n<p>그렇게 max 넓이를 계속 최신화 해가면서 하면 될 거 같았다.</p>\n<h3>1차 시기 코드</h3>\n<pre><code class=\"language-js\">function largestRectangle(h) {\n    let cursor = 0;\n    let max_area = 0;\n    \n    for (let i = 0; i &#x3C; h.length; i++) {\n        const current_height = h[i];\n        \n        let width = 1;\n        for (let j = i - 1; j >= 0; j--) {\n            if (h[j] &#x3C; current_height) {\n                break;\n            }\n            width++;\n        }\n        \n        let prev_area = 0;\n        \n        for (let j = i; j >= cursor; j--) {\n            prev_area = Math.max((i - j + 1) * h[j], prev_area);\n        }\n        \n        const curr_area = width * current_height;\n        \n        if (curr_area >= prev_area) {\n            cursor = i;\n            max_area = Math.max(curr_area, max_area);\n        } else {\n            max_area = Math.max(prev_area, max_area);\n        }\n    }\n    \n    return max_area;\n}\n</code></pre>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113736432-0e5ef900-9738-11eb-95bc-0c4c3043ffdd.png\" alt=\"image\"></p>\n<p>테스트 케이스를 다 통과해서 맞았구나 했는데,</p>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113736536-28004080-9738-11eb-8048-f59037f7f924.png\" alt=\"image\"></p>\n<p>결과는 진짜 테스트 케이스만 맞았다. 어떻게 그렇게 지엽적인 해결책을 냈는지 참... 엣지 케이스를 생각하는 방법을 고민해봐야겠다. 실제 코딩테스트 때도 테스트 케이스는 적게 나왔으니...</p>\n<p>그래서 뭐가 잘못되었는지 생각을 해봐도 잘 모르겠어서 결국 다른 사람의 해결책을 참고하기로 했다.</p>\n<p>스택, 큐 문제 답게 스택으로 푼 사람의 해결책을 봤는데, 내가 접근한 방법과 아주 조금 비슷했다. 어느 한 지점에서 부터는 다시 뒤로 돌아오며 넓이를 구한다는 점이 비슷했다.</p>\n<p>결국 그 사람의 해결책은 이렇다:</p>\n<ol>\n<li>스택의 가장 위에 있는 건물보다 작은 건물이 나올 때까지 스택에 건물의 위치(배열의 인덱스)를 넣는다.</li>\n<li>스택의 가장 위에 있는 건물보다 작은 건물이 나왔다면, 스택에서 하나씩 빼가면서 그 건물까지 가능한 최대 넓이를 업데이트 한다.</li>\n<li>현재의 건물 보다 작거나 같은 건물이 나올 때 까지 스택에서 하나씩 뺀다.</li>\n</ol>\n<p>이런 방식이었다. 나는 커서로 했는데, 그걸 스택을 사용하는 것 까지는 미치지 못해서 그렇게 되었던 것 같다.</p>\n<h3>2차 시기 코드</h3>\n<pre><code class=\"language-js\">function largestRectangle(h) {\n    const stack = [];\n    let max_area = 0;\n    \n    for (let i = 0; i &#x3C;= h.length; i++) {\n        const height = h[i] || 0;\n        const top = h[stack[stack.length - 1]];\n        \n        if (stack.length === 0 || top &#x3C; height) {\n            stack.push(i);\n        } else {\n            let temp = stack[stack.length - 1];\n            \n            while (stack.length > 0 &#x26;&#x26; h[stack[stack.length - 1]] > height) {\n                temp = stack.pop();\n                if (stack.length === 0) {\n                    const area = h[temp] * i;\n                    max_area = Math.max(area, max_area);\n                } else {\n                    const area = h[temp] * (i - stack[stack.length - 1] - 1);\n                    max_area = Math.max(area, max_area);\n                }\n            }\n            stack.push(i);\n        }\n    }\n    \n    return max_area;\n}\n</code></pre>\n<p>결과는 성공이다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113501435-fa609f00-955f-11eb-8161-4e8fae641c94.png\" alt=\"image\"></p>\n<p>제일 처음에는 스택 문제 길래 스택으로 풀면 될 것 같아서 거기에 매달렸는데, 그게 오히려 독이 될 것 같아 다른 방법으로 했는데, 다시 스택으로 돌아오게 되었다. 문제 자체는 쉬워보였지만 해결을 위한 알고리즘을 짜는 건 참 어렵다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/35324795/113736312-f1c2c100-9737-11eb-98d4-5e75b87dabc5.png\" alt=\"image\"></p>\n<p>골드 버튼인지 뭔지 받았다. 실력은 조금씩 늘어나는거 같긴 하다.</p>","frontmatter":{"path":"devlog/essay/20210406","category":"coding test","title":"[해커랭크] Largest Rectangle","summary":"오늘의 코딩테스트 21.4.6","date_created":"2021.4.6","date_updated":""}}},"pageContext":{}},"staticQueryHashes":[]}